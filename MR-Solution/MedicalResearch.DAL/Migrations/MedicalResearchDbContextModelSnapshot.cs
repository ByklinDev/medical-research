// <auto-generated />
using System;
using MedicalResearch.DAL.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedicalResearch.DAL.Migrations
{
    [DbContext(typeof(MedicalResearchDbContext))]
    partial class MedicalResearchDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClinicStockSupply", b =>
                {
                    b.Property<int>("ClinicStocksId")
                        .HasColumnType("integer");

                    b.Property<int>("SuppliesId")
                        .HasColumnType("integer");

                    b.HasKey("ClinicStocksId", "SuppliesId");

                    b.HasIndex("SuppliesId");

                    b.ToTable("ClinicStockSupply");
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressOne")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressTwo")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.ClinicStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("ClinicId")
                        .HasColumnType("integer");

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("MedicineId");

                    b.ToTable("ClinicsStocks");
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.Container", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Containers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "box"
                        },
                        new
                        {
                            Id = 2,
                            Name = "bottle"
                        },
                        new
                        {
                            Id = 3,
                            Name = "blister"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ampoule"
                        },
                        new
                        {
                            Id = 5,
                            Name = "vial"
                        });
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.DosageForm", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DosageForms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "tablet"
                        },
                        new
                        {
                            Id = 2,
                            Name = "capsule"
                        },
                        new
                        {
                            Id = 3,
                            Name = "syrup"
                        },
                        new
                        {
                            Id = 4,
                            Name = "suspension"
                        },
                        new
                        {
                            Id = 5,
                            Name = "oinment"
                        });
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("ContainerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DosageFormId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExpireAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MedicineTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("DosageFormId");

                    b.HasIndex("MedicineTypeId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.MedicineType", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MedicinesTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "B"
                        },
                        new
                        {
                            Id = 3,
                            Name = "C"
                        },
                        new
                        {
                            Id = 4,
                            Name = "D"
                        });
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("ClinicId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id", "ClinicId");

                    b.HasIndex("ClinicId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.Role", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sponsor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Researcher"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Anonymous"
                        });
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.Supply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int?>("ClinicId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateArrival")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MedicineId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Supplies");
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClinicId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "byklin@list.ru",
                            FirstName = "Admin",
                            Password = "qd3Ju3lhxMRBtD9AGIgm6ni1iykJeYib0HKyGOpWEZM=",
                            State = 0
                        });
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.Visit", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("ClinicId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfVisit")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfVisit")
                        .HasColumnType("integer");

                    b.Property<int>("PatientClinicId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("PatientId", "ClinicId", "DateOfVisit", "MedicineId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("UserId");

                    b.HasIndex("PatientId", "PatientClinicId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_UserRole");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("ClinicStockSupply", b =>
                {
                    b.HasOne("MedicalResearch.Domain.Models.ClinicStock", null)
                        .WithMany()
                        .HasForeignKey("ClinicStocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalResearch.Domain.Models.Supply", null)
                        .WithMany()
                        .HasForeignKey("SuppliesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.ClinicStock", b =>
                {
                    b.HasOne("MedicalResearch.Domain.Models.Clinic", "Clinic")
                        .WithMany("ClinicStocks")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalResearch.Domain.Models.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.Medicine", b =>
                {
                    b.HasOne("MedicalResearch.Domain.Models.Container", "Container")
                        .WithMany("Medicines")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalResearch.Domain.Models.DosageForm", "DosageForm")
                        .WithMany("Medicines")
                        .HasForeignKey("DosageFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalResearch.Domain.Models.MedicineType", "MedicineType")
                        .WithMany("Medicines")
                        .HasForeignKey("MedicineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Container");

                    b.Navigation("DosageForm");

                    b.Navigation("MedicineType");
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.Patient", b =>
                {
                    b.HasOne("MedicalResearch.Domain.Models.Clinic", "Clinic")
                        .WithMany("Patients")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.Supply", b =>
                {
                    b.HasOne("MedicalResearch.Domain.Models.Clinic", "Clinic")
                        .WithMany("Supplies")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalResearch.Domain.Models.Medicine", "Medicine")
                        .WithMany("Supplies")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.User", b =>
                {
                    b.HasOne("MedicalResearch.Domain.Models.Clinic", "Clinic")
                        .WithMany("Users")
                        .HasForeignKey("ClinicId");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.Visit", b =>
                {
                    b.HasOne("MedicalResearch.Domain.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalResearch.Domain.Models.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalResearch.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalResearch.Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId", "PatientClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Medicine");

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("MedicalResearch.Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_RoleId");

                    b.HasOne("MedicalResearch.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_UserId");
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.Clinic", b =>
                {
                    b.Navigation("ClinicStocks");

                    b.Navigation("Patients");

                    b.Navigation("Supplies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.Container", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.DosageForm", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.Medicine", b =>
                {
                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("MedicalResearch.Domain.Models.MedicineType", b =>
                {
                    b.Navigation("Medicines");
                });
#pragma warning restore 612, 618
        }
    }
}
